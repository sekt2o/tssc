#!/usr/bin/env python
# -*- coding: utf-8 -*-

##################################
#
# Teacher'S Screen Cast ver.1.0
# agent program
#
# Created by T.Sekimoto@ryukoku IMC
# (sekimoto@ad.ryukoku.ac.jp)
#
# 1st release 2015/03/25
#
##################################

#いまの問題点
#　・ログ出力（2014/06/05）

# scriptのdaemon化
# "python-daemon"をいれてdaemon化しています。
#  apt-get -y install python-daemon

from __future__ import with_statement
from daemon import DaemonContext
from daemon.pidlockfile import PIDLockFile

import socket
import signal
import time
import os
import subprocess
import datetime
import logging

#スクリーンサイズを取得
resuls = subprocess.Popen(['xrandr'],stdout=subprocess.PIPE).communicate()[0].split("current")[1].split(",")[0]
width = resuls.split("x")[0].strip()
halfWidth = str(int(width) / 2)
heigth = resuls.split("x")[1].strip()
halfHeigth = str(int(heigth) / 2)
print halfWidth + "x" + halfHeigth

# 設定
ANY = '0.0.0.0'
MCAST_ADDR = '224.168.2.9'
MCAST_PORT = 1600
SRV_ADDR = '100'	#配信元IPアドレスのホスト部

#日付取得
def DATETIME():
	return datetime.datetime.now()

#VLC起動
def startVlc(opt):
	if opt == "full":
		proc = subprocess.Popen(['vlc', 'udp://@239.255.0.1', '--network-caching=0', '--udp-caching=0', '--rtp-caching=0', '--fullscreen'],
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			shell=False)
		logger.info('normal: %s', 'Vlc full screen multicast has been started.', extra=d)
		
	elif opt == "half":
		proc = subprocess.Popen(['vlc', 'udp://@239.255.0.1', '--network-caching=0', '--udp-caching=0', '--rtp-caching=0', '--width='+halfWidth+'', '--height='+heigth+'', '--no-qt-privacy-ask', '--no-ignore-config', '--qt-minimal-view'],
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			shell=False)
		logger.info('normal: %s', 'Vlc full screen multicast has been started.', extra=d)
		
	else:
		proc = subprocess.Popen(['vlc', 'udp://@239.255.0.1', '--network-caching=0', '--udp-caching=0', '--rtp-caching=0', '--video-on-top', '--video-filter=magnify', '--width='+halfWidth+'', '--height='+halfHeigth+'', '--qt-notification=0', '--no-qt-privacy-ask', '--no-ignore-config', '--qt-minimal-view', '--no-qt-video-autoresize'],
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			shell=False)
		logger.info('normal: %s', 'Vlc normal screen multicast has been started.', extra=d)
	return proc

#VLC終了
def stopVlc(pid):

	if data == "stop":

		try:
			pid
		except NameError:
			#print DATETIME(),"ERROR: no pid"
			logger.info('Error: %s', 'no pid.', extra=d)
		else:
			if pid !="":
				os.kill(pid, signal.SIGUSR1)
				pid = ""
				logger.info('normal: %s', 'Vlc multicast has been stopped.', extra=d)

#ログ出力の設定
handler = logging.FileHandler('/tmp/tssc_agentd.log')
logging.basicConfig(level=logging.DEBUG)

d = {}
d['user'] = os.getlogin()

formatter = logging.Formatter('%(asctime)s - %(user)s - %(message)s')
handler.setFormatter(formatter)
logger = logging.getLogger('tssc_agentd')
logger.addHandler(handler)

# Pidファイルの作成
dc = DaemonContext(
    pidfile=PIDLockFile('/tmp/tssc_agentd.pid'),
    stderr=open('/tmp/tssc_agentd.error', 'w+'),
		files_preserve = [handler.stream]
)

if __name__ == '__main__':

	with dc:
		logger.info('normal: %s', 'Start the daemon.', extra=d)

		#UDPパケット生成
		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
		#allow multiple sockets to use the same PORT number
		sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)

		#マルチキャストデータを受けるポートにバインド
		sock.bind((ANY,MCAST_PORT))

		#マルチチャストソケットをセット
		sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 255)

		#マルチキャストグループに自身を加えるようカーネルに命令
		#3番目のパラメータはマルチキャスト・グループのためのアドレス
		status = sock.setsockopt(socket.IPPROTO_IP,
			socket.IP_ADD_MEMBERSHIP,
			socket.inet_aton(MCAST_ADDR) + socket.inet_aton(ANY));
		sock.setblocking(0)

		pid = ""	#プロセスIDの初期化
		proc = ""	#プロセスの初期化
		flg = ""	#フラグの初期

		while True:
			
			if pid:
				
				#プロセスが終了するまで処理を実施
				while proc.poll() is None:
					try:
						#print DATETIME(),"debug....runnning VLC."
						#logger.info('normal: %s', 'runnning VLC.', extra=d)
						data, addr = sock.recvfrom(1024)	#ソケット監視
						
					except socket.error, e:
						time.sleep(1) #CPU負荷を下げるため1秒待つ
						pass

					else:
						#配信停止の命令がでた場合はvlcをkillする
						stopVlc(pid)
						flg = "stop"

				pid = "" #pid初期化
				#print DATETIME(),"debug....stop VLC."
				#logger.info('normal: %s', 'stop VLC.', extra=d)

				if flg != "stop":
					proc = startVlc("standard")
					pid = proc.pid

			try:
				data, addr = sock.recvfrom(1024)

			except socket.error, e:
				time.sleep(1) #CPU負荷を下げるため1秒待つ
				pass

			else:

				#マルチキャスト元のIPが該当IPの場合は処理を実施
				#配信元IPアドレスのホスト部で識別
				if addr[0].endswith(SRV_ADDR):
					
					logger.info('normal: Connection from %s was allowed.', addr)

					#通常表示
					if data == "start" and pid == "":
						flg = "start"
						proc = startVlc("standard")
						pid = proc.pid

					#全画面表示
					elif data == "start -f" and pid == "":
						flg = "start"
						proc = startVlc("full")
						pid = proc.pid
						
					#半画面表示
					elif data == "start -h" and pid == "":
						flg = "start"
						proc = startVlc("half")
						pid = proc.pid

				#マルチキャスト元のIPが該当IP以外の場合はエラーメッセージを表示
				else:
					logger.info('error: Connection from %s was not allowed.', addr)
